name: Build

on:
  workflow_dispatch:
    inputs:
      package_names:
        description: 'Comma-separated list of additional packages to install'
        required: true

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Ensure the entire repository history is available for determining the previous ISO.

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Add Cubic PPA
      run: |
        echo "Adding Cubic PPA..."
        sudo add-apt-repository ppa:cubic-wizard/release -y
        sudo apt-get update

    - name: Install Cubic
      run: |
        echo "Installing Cubic..."
        sudo apt-get install cubic -y

    - name: Install Python Packages and dev tools
      run: | 
         sudo apt-get install build-essential libssl-dev libffi-dev
         pip install requests
         pip install --no-use-pep517 python-dotenv
         
    - name: Notify Discord - Setup
      run: python .github/workflows/discord_notifier.py
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  download-previous:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - name: Notify Discord - Download Previous
      run: python .github/workflows/discord_notifier.py
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

    - name: Determine Previous ISO
      run: |
        echo "Determining the previous ISO..."
        if [ -f previous_iso.txt ]; then
          previous_iso_name=$(cat previous_iso.txt)
        else
          previous_iso_name="latest"
        fi
        echo "PREVIOUS_ISO_NAME=$previous_iso_name" >> $GITHUB_ENV

    - name: Download Previous ISO
      id: download-previous
      run: |
        echo "Downloading the previous ISO..."
        if [ "$PREVIOUS_ISO_NAME" == "latest" ]; then
          # If no previous ISO is found, download the latest added version
          wget -N --timestamping https://archive.org/download/spoink-os/SpoinkOS-Latest-desktop-amd64.iso -O latest.iso
        else
          wget https://archive.org/download/spoink-os/${PREVIOUS_ISO_NAME}.iso -O previous.iso
          rm previous.iso
        fi

  build-iso:
    needs: download-previous
    runs-on: ubuntu-latest
    steps:
    - name: Notify Discord - Build ISO
      run: python .github/workflows/discord_notifier.py
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

    - name: Generate Timestamp Code Name
      id: timestamp-code-name
      run: |
        echo "Generating a timestamp code name..."
        echo "CODE_NAME=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

    - name: Download Custom ISO
      run: |
        iso_name=${{ env.CODE_NAME }}-$(date +'%Y%m%d%H%M%S')
        echo "Downloading the custom ISO..."
        wget https://archive.org/download/spoink-os/SpoinkOS-Latest-desktop-amd64.iso -O $iso_name.iso
        echo "$iso_name" > previous_iso.txt

    - name: Install Additional Packages
      id: install-packages
      run: |
        echo "Installing additional packages..."
        echo "${{ inputs.package_names }}" | tr ',' '\n' | xargs sudo cubic chroot $iso_name.iso apt-get install -y
        
  publish-to-archive:
    needs: build-iso
    runs-on: ubuntu-latest
    steps:
    - name: Notify Discord - Publish to Archive
      run: python .github/workflows/discord_notifier.py
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

    - name: Setup IA Configuration
      run: |
        echo "Setting up Internet Archive configuration..."
        sudo apt-get install python3-pip -y
        pip3 install internetarchive
        ia configure --config /root/.config/ia.cfg

    - name: Publish to Internet Archive
      run: |
        echo "Publishing the ISO to Internet Archive..."
        ia upload spoink-os $iso_name.iso
        echo "ISO published to Internet Archive."

  clean-up:
    needs: publish-to-archive
    runs-on: ubuntu-latest
    steps:
    - name: Notify Discord - Clean Up
      run: python discord_notifier.py
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

    - name: Clean Up
      run: |
        echo "Cleaning up temporary files..."
        rm -f latest.iso
